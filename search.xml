<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>活体检测概述</title>
    <url>/2020/02/12/%E6%B4%BB%E4%BD%93%E6%A3%80%E6%B5%8B%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="活体检测简介"><a href="#活体检测简介" class="headerlink" title="活体检测简介"></a>活体检测简介</h1><h3 id="什么是活体检测？"><a href="#什么是活体检测？" class="headerlink" title="什么是活体检测？"></a>什么是活体检测？</h3><p>判断捕捉到的人脸是真实人脸，还是伪造的人脸攻击（如：彩色纸张打印人脸图，电子设备屏幕中的人脸数字图像以及面具等）。</p>
<h3 id="为什么需要活体检测？"><a href="#为什么需要活体检测？" class="headerlink" title="为什么需要活体检测？"></a>为什么需要活体检测？</h3><p>在金融支付，门禁等应用场景，活体检测一般是嵌套在人脸检测与人脸识别or验证中的模块，用来验证是否用户真实本人。</p>
<h3 id="活体检测对应的计算机视觉问题"><a href="#活体检测对应的计算机视觉问题" class="headerlink" title="活体检测对应的计算机视觉问题"></a>活体检测对应的计算机视觉问题</h3><p>就是分类问题，可看成二分类（真 or 假）；也可看成多分类（真人，纸张攻击，屏幕攻击，面具攻击）。</p>
<h3 id="活体与非活体有什么区别？"><a href="#活体与非活体有什么区别？" class="headerlink" title="活体与非活体有什么区别？"></a>活体与非活体有什么区别？</h3><ul>
<li><p>颜色纹理</p>
</li>
<li><p>非刚性运动变形</p>
</li>
<li><p>材料 （皮肤，纸质，镜面）</p>
</li>
<li><p>图像or视频质量</p>
<a id="more"></a>

</li>
</ul>
<h1 id="活体检测的不同输入形式"><a href="#活体检测的不同输入形式" class="headerlink" title="活体检测的不同输入形式"></a>活体检测的不同输入形式</h1><h2 id="近红外NIR"><a href="#近红外NIR" class="headerlink" title="近红外NIR"></a>近红外NIR</h2><p>由于NIR的光谱波段与可见光VIS不同，故真实人脸及非活体载体对于近红外波段的吸收和反射强度也不同，即也可通过近红外相机出来的图像来活体检测。从出来的图像来说，近红外图像对屏幕攻击的区分度较大，对高清彩色纸张打印的区分度较小。</p>
<p>从特征工程角度来说，方法无非也是提取NIR图中的光照纹理特征或者 远程人脸心率特征 来进行。下图可见，上面两行是真实人脸图中人脸区域与背景区域的直方图分布，明显与下面两行的非活体图的分布不一致；而通过与文章[5]中一样的rPPG提取方法，在文章中说明其在NIR图像中出来的特征更加鲁棒。</p>
<p><img src="%E6%B4%BB%E4%BD%93%E6%A3%80%E6%B5%8B%E6%A6%82%E8%BF%B0/1581494695238.png" alt="1581494695238"></p>
<h2 id="结构光-ToF"><a href="#结构光-ToF" class="headerlink" title="结构光/ToF"></a>结构光/ToF</h2><p>由于结构光及ToF能在近距离里相对准确地进行3D人脸重构，即可得到人脸及背景的点云图及深度图，可作为精准活体检测（而不像单目RGB或双目RGB中仍需估计深度）。不过就是成本较高，看具体应用场景决定。</p>
<p><img src="%E6%B4%BB%E4%BD%93%E6%A3%80%E6%B5%8B%E6%A6%82%E8%BF%B0/1581493049557.png" alt="1581493049557"></p>
<p>很多朋友都知道，今年各个手机厂家的旗舰产品基本都搭载了3D结构光的技术，3D结构光可以说是当下最配称之为黑科技的技术之一了，但是大家都以为3D结构光只用作于人脸识别，其实并不是！</p>
<p>通俗来讲，3D结构光是从摄像头弹出数百万条投射光线到识别物体上，形成三维立体图像，能够更精确的识别物体，用深度一些的话来解释就是：根据投射的潜望结构光线扫描采集物体信息，通过”点”对”面”的特殊算法构成三维图像进行对比与识别。</p>
<p><img src="%E6%B4%BB%E4%BD%93%E6%A3%80%E6%B5%8B%E6%A6%82%E8%BF%B0/1581493128808.png" alt="1581493128808"></p>
<p>3D结构光的用途不仅在于面部识别，还可以用于美颜自拍(有针对性的美颜，分析脸部结构进行计算，并非糊成一片的”美白、大眼、瘦脸”)、AR购物(只需要扫描脸部即可实现自动换衣、选衣)、3D打印(由手机进行扫描，再传输到3D打印机上)以及很可爱的萌拍等多项技术；</p>
<h2 id="光场-Light-field"><a href="#光场-Light-field" class="headerlink" title="光场 Light field"></a>光场 Light field</h2><p>光场相机具有光学显微镜头阵列，且由于光场能描述空间中任意一点向任意方向的光线强度，出来的raw光场照片及不同重聚焦的照片，都能用于活体检测：</p>
<h3 id="raw光场照片及对应的子孔径照片"><a href="#raw光场照片及对应的子孔径照片" class="headerlink" title="raw光场照片及对应的子孔径照片"></a>raw光场照片及对应的子孔径照片</h3><p>如下图所示，对于真实人脸的脸颊边缘的微镜图像，其像素应该是带边缘梯度分布；而对应纸张打印或屏幕攻击，其边缘像素是随机均匀分布：</p>
<p><img src="%E6%B4%BB%E4%BD%93%E6%A3%80%E6%B5%8B%E6%A6%82%E8%BF%B0/1581493465754.png" alt="1581493465754"></p>
<h3 id="使用一次拍照的重聚焦图像"><a href="#使用一次拍照的重聚焦图像" class="headerlink" title="使用一次拍照的重聚焦图像"></a>使用一次拍照的重聚焦图像</h3><p>原理是可以从两张重聚焦图像的差异中，估计出深度信息；从特征提取来说，真实人脸与非活体人脸的3D人脸模型不同，可提取差异图像中的 亮度分布特征+聚焦区域锐利程度特征+频谱直方图特征。</p>
<h1 id="活体检测衡量指标"><a href="#活体检测衡量指标" class="headerlink" title="活体检测衡量指标"></a>活体检测衡量指标</h1><p>衡量人脸识别算法性能的优劣有很多不同的标准，比如FAR，FRR，TAR等。</p>
<h3 id="TPR"><a href="#TPR" class="headerlink" title="TPR"></a>TPR</h3><p>TPR （True Positive Rate）真正类率，又叫真阳率，代表预测是异常实际也是异常的样本数，占实际总异常数的比例——数值越大，性能越好：<br>$$<br>TPR=TP/(TP+FN)<br>$$</p>
<h3 id="FPR"><a href="#FPR" class="headerlink" title="FPR"></a>FPR</h3><p>FPR （False Positive Rate）假正类率，又叫假阳率，代表预测是异常但实际是正常的样本数，占实际正常总数的比例——数值越小，性能越好：<br>$$<br>FPR=FP/(FP+TN)<br>$$</p>
<h3 id="TPR-FPR"><a href="#TPR-FPR" class="headerlink" title="TPR@FPR"></a>TPR@FPR</h3><p>TPR@10e-4 FPR即为当FPR为10e-4时候的TPR的数值，之所以采用这种形式是因为在不同的FPR下度量的TPR是会不同的。这个数值越大，说明算法性能越好。</p>
<h1 id="活体检测算法"><a href="#活体检测算法" class="headerlink" title="活体检测算法"></a>活体检测算法</h1><h2 id="传统算法"><a href="#传统算法" class="headerlink" title="传统算法"></a>传统算法</h2><p>\1.       Image Distortion Analysis, 2015</p>
<p>如下图，单帧输入的方法，设计了 镜面反射+图像质量失真+颜色 等统计量特征，合并后直接送SVM进行二分类。</p>
<p>Cons: 对于高清彩色打印的纸张 or 高清录制视频，质量失真不严重时，难区分开。</p>
<p>\2.       Colour Texture, 2016</p>
<p>Oulu CMVS组的产物，算是传统方法中的战斗机，特别简洁实用，Matlab代码（课题组官网有），很适合搞成C++部署到门禁系统。</p>
<p>原理：活体与非活体，在RGB空间里比较难区分，但在其他颜色空间里的纹理有明显差异。</p>
<p>算法：HSV空间人脸多级LBP特征 + YCbCr空间人脸LPQ特征 （后在17年的paper拓展成SURF特征）。</p>
<p>Pros: 算法简洁高效易部署；也证明了活体与非活体在 HSV等其他空间也是 discriminative，故后续深度学习方法有将HSV等channel也作为输入来提升性能。</p>
<p>\3.       Motion mag.-HOOF + LBP-TOP, 2014、DMD + LBP, 2015</p>
<p>前面说的都是单帧方法，这两篇文章输入的是连续多帧人脸图，主要通过捕获活体与非活体微动作之间的差异来设计特征。</p>
<p>一个是先通过运动放大来增强脸部微动作， 然后提取方向光流直方图HOOF + 动态纹理LBP-TOP 特征；一个是通过动态模式分解DMD，得到最大运动能量的子空间图，再分析纹理。</p>
<p>PS：这个 motion magnification 的预处理很差劲，加入了很多其他频段噪声（18年新出了一篇用 Deep learning 来搞 Motion mag. 看起来效果挺好，可以尝试用那个来做运动增强，再来光流orDMD）</p>
<p><strong>Motion mag.-HOOF + LBP-TOP, 2014</strong></p>
<p><strong>DMD + LBP, 2015</strong></p>
<p>Cons: 基于Motion的方法，对于仿人脸wrapped纸张抖动和视频攻击，效果不好；因为它假定了活体与非活体之间的非刚性运动有明显的区别，但其实这种微动作挺难描述与学习。</p>
<p>\4.       Pulse + texture, 2016</p>
<p>第一个将 remote pluse 应用到活体检测中，多帧输入。</p>
<p>（交代下背景：在CVPR2014，当时 Xiaobai Li 已经提出了从人脸视频里测量心率的方法）</p>
<p>算法流程： </p>
<p>\1. 通过 pluse 在频域上分布不同先区分 活体 or 照片攻击 （因为照片中的人脸提取的心率分布不同）</p>
<p>\2. 若判别1结果是活体，再 cascade 一个 纹理LBP 分类器，来区分 活体 or 屏幕攻击（因为屏幕视频中人脸心率分布与活体相近）</p>
<p>Pros: 从学术界来说，引入了心理信号这个新模态，很是进步；从工业界来看，如果不能一步到位，针对每种类型攻击，也可进行 Cascade 对应的特征及分类器的部署方式。</p>
<p>Cons: 由于 remote heart rate 的算法本来鲁棒性也一般，故出来的 pulse-feature 的判别性能力很不能保证；再者屏幕video里的人脸视频出来的 pulse-feature 是否也有微小区别，还待验证。</p>
<p><strong>（二）</strong>     深度学习算法</p>
<p>其实用 Deep learning 来做活体检测，从15年陆陆续续就有人在研究，但由于公开数据集样本太少，一直性能也超越不了传统方法。</p>
<p>\1.       CNN-LSTM, 2015</p>
<p>多帧方法，想通过 CNN-LSTM 来模拟传统方法 LBP-TOP，性能堪忧。</p>
<p>\2.       PatchNet pretrain，CNN finetune, 2017</p>
<p>单帧方法，通过人脸分块，pre-train 网络；然后再在 global 整个人脸图 fine-tune，作用不大</p>
<p>\3.       Patch and Depth-Based CNNs, 2017</p>
<p>第一个考虑把人脸深度图作为活体与非活体的差异特征，因为像屏幕中的人脸一般是平的，而纸张中的人脸就算扭曲，和真人人脸的立体分布也有差异。 </p>
<p>就算用了很多 tricks 去 fusion，性能还是超越不了传统方法。</p>
<p>\4.       Deep Pulse and Depth, 2018</p>
<p>发表在 CVPR2018 的文章，终于超越了传统方法性能。</p>
<p>设计了深度框架准端到端地去预测 Pulse统计量及 Depth map （这里说的“准”，就是最后没接分类器，直接通过样本 feature 的相似距离，阈值决策）</p>
<p>在文章中明确指明：</p>
<p>l 过去方法把活体检测看成二分类问题，直接让DNN去学习，这样学出来的cues不够general 和 discriminative</p>
<p>l 将二分类问题换成带目标性地特征监督问题，即 回归出 pulse 统计量 + 回归出 Depth map，保证网络学习的就是这两种特征（哈哈，不排除假设学到了 color texture 在里面，黑箱网络这么聪明）</p>
<p>回归 Depth map，就是通过 Landmark 然后 3DMMfitting 得到 人脸3D shape，然后再阈值化去背景，得到 depth map 的 groundtruth，最后和网络预测的 estimated depth map 有 L2 loss。</p>
<p>而文章亮点在于设计了 Non-rigid Registration Layer 来对齐各帧人脸的非刚性运动（如姿态，表情等），然后通过RNN更好地学到 temporal pulse 信息。</p>
<p>为什么需要这个对齐网络呢？我们来想想，在做运动识别任务时，只需简单把 sampling或者连续帧 合并起来喂进网络就行了，是假定相机是不动的，对象在运动；而文中需要对连续人脸帧进行pulse特征提取，主要对象是人脸上对应ROI在 temporal 上的 Intensity 变化，所以就需要把人脸当成是相机固定不动。</p>
<p>\5.       Micro-texture + SSD or binocular depth , 2018</p>
<p>最大的贡献是把活体检测直接放到人脸检测（SSD，MTCNN等）模块里作为一个类，即人脸检测出来的 bbox 里有 “背景”，“真人人脸”，“假人脸”三类的置信度，这样可以在早期就过滤掉一部分非活体。</p>
<p>所以整个系统速度非常地快，很适合工业界部署。</p>
<p>至于后续手工设计的 SPMT feature 和 TFBD feature 比较复杂繁琐，分别是表征 micro-texture 和 stereo structure of face，有兴趣的同学可以去细看。</p>
<p>\6.        De-Spoofing, ECCV2018</p>
<p>单帧方法，文章的idea很有趣，启发于图像去噪de-noise 和 图像去抖动 de-blur。无论是噪声图还是模糊图，都可看成是在原图上加噪声运算或者模糊运算（即下面的公式），而去噪和去抖动，就是估计噪声分布和模糊核，从而重构回原图。</p>
<p>文中把活体人脸图看成是原图   ，而非活体人脸图看成是加了噪声后失真的x，故 task 就变成估计 Spoof noise   ，然后用这个 Noise pattern feature 去分类决策。</p>
<p>那问题来了，数据集没有像素级别一一对应的 groundtruth，也没有Spoof Noise模型的先验知识（如果有知道Noise模型，可以用Live Face来生成Spoofing Face），那拿什么来当groundtruth，怎么设计网络去估计 Spoofing noise 呢？</p>
<p>如一般Low-level image 任务一样，文中利用Encoder-decoder来得到 Spoof noise N，然后通过残差重构出   ，这就是下图的DS Net。为了保证网络对于不同输入，学出来的Noise是有效的，根据先验知识设计了三个Loss来constrain：</p>
<p>Magnitude loss(当输入是Live face时，N尽量逼近0)；</p>
<p>Repetitive loss(Spooing face的Noise图在高频段有较大的峰值)；</p>
<p>0\1Map Loss(让Real Face 的 deep feature map分布尽量逼近全0，而Spoofing face的 deep feature map 尽量逼近全1)</p>
<p>那网络右边的 VQ-Net 和 DQ-Net 又有什么作用呢？因为没有 Live face 的 Groundtruth，要保证重构出来的分布接近 Live face，作者用了对抗生成网络GAN (即 VQ-Net )去约束重构生成的   与Live face分布尽量一致；而用了pre-trained Depth model 来保证   的深度图与Live face的深度图尽量一致。</p>
<p>Pros: 通过可视化最终让大众知道了 Spoofing Noise 是长什么样子的~</p>
<p>Cons: 在实际场景中难部署（该模型假定Spoofing Noise是 strongly 存在的，当实际场景中活体的人脸图质量并不是很高，而非活体攻击的质量相对高时，Spoofing noise走不通）</p>
<p><strong>（三）</strong>     一些开源模型</p>
<p>\1.       Opencv 简易版</p>
<p><a href="https://www.pyimagesearch.com/2019/03/11/liveness-detection-with-opencv/" target="_blank" rel="noopener">https://www.pyimagesearch.com/2019/03/11/liveness-detection-with-opencv/</a></p>
<p><strong>三、</strong>   活体检测数据库</p>
<p><strong>（一）</strong>     公开数据</p>
<p>· NUAA: <a href="https://links.jianshu.com/go?to=http%3A%2F%2Fparnec.nuaa.edu.cn%2Fxtan%2Fdata%2Fnuaaimposterdb.html" target="_blank" rel="noopener">http://parnec.nuaa.edu.cn/xtan/data/nuaaimposterdb.html</a> </p>
<p>· <a href="https://links.jianshu.com/go?to=http%3A%2F%2Fparnec.nuaa.edu.cn%2Fxtan%2FNUAAImposterDB_download.html" target="_blank" rel="noopener">http://parnec.nuaa.edu.cn/xtan/NUAAImposterDB_download.html</a> </p>
<p>· Replay-Attack dataset: <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.idiap.ch%2Fdataset%2Freplayattack" target="_blank" rel="noopener">https://www.idiap.ch/dataset/replayattack</a> </p>
<p>· CASIA Face Anti-Spoofing Database: <a href="https://links.jianshu.com/go?to=http%3A%2F%2Fwww.cbsr.ia.ac.cn%2Fenglish%2FFaceAntiSpoofDatabases.asp" target="_blank" rel="noopener">http://www.cbsr.ia.ac.cn/english/FaceAntiSpoofDatabases.asp</a> </p>
<p>· MSU Mobile Face Spoofing Database (MSU MFSD): <a href="https://links.jianshu.com/go?to=http%3A%2F%2Fbiometrics.cse.msu.edu%2FPublications%2FDatabases%2FMSUMobileFaceSpoofing%2Findex.htm%23Download_instructions" target="_blank" rel="noopener">http://biometrics.cse.msu.edu/Publications/Databases/MSUMobileFaceSpoofing/index.htm#Download_instructions</a></p>
<p><strong>（二）</strong>     合成数据</p>
<p>\1.       “反光+透视畸变”数据</p>
<p>实际场景中的攻击样本不是分辨率低就是有反光+透视畸变，可以自己合成数据，处理流程如下：</p>
<p>模糊：用大小随机的高斯核处理真人样本；</p>
<p>透视畸变：将真人样本裁减成设备屏幕大小，替换原本屏幕区域得到X1；将X1与某随机图像B加权叠加得到X2，B的权重为为[0, 0.2]之间的随机数；对X2做透视变换，再与随机背景图做mask叠加，即用背景替换X2透视变换产生的“0”值区域，得到目标图像。如下图所示，至此，第二部分攻击样本合成结束。</p>
<p><strong>四、</strong>   活体检测比赛</p>
<p><strong>（一）</strong>     即将进行的比赛</p>
<p><strong>（二）</strong>     往届赛事</p>
<p>\1.       ChaLearn Face Anti-spoofing Attack Detection Challenge @CVPR2019</p>
<p>CVPR2019的workshop，此次比赛项目是人脸防欺诈攻击检测。</p>
<p>人脸防欺诈攻击检测，主要是帮助人脸识别系统判断被采集人脸是用户本人脸部，还是打印的照片，录制的视频，3D面具等伪造物，所以也叫活体检测。这项技术对于手机解锁，门禁控制，刷脸支付的安全性是至关重要的。</p>
<p>从技术发展上，人脸防欺诈检测可以简单地分为两大类：传统的人工特征模式识别方法和近几年兴起的CNN深度学习方法。通过在几个通用数据集上的测试，目前，深度学习方法在识别准确性上对传统方法已成碾压态势。本次比赛中，也很难见到传统方法的身影。</p>
<p>（1）      衡量指标</p>
<p>这次比赛主要依据的是TPR@10e-4 FPR作为衡量标准。</p>
<p>（2）      比赛数据集</p>
<p>CASIA-SURF，这是中科院自动化所推出的数据集，包含了1000个个体样本的21000段视频。采集设备是英特尔的RealSense SR300立体相机，同时采集了RGB，红外图，和深度图。数据集按3：1：6的比例分成了训练、开发、测试三个子集。大赛为了检验参赛模型有足够泛化能力，训练集只给了一部分。</p>
<p>（3）      比赛优秀模型介绍</p>
<p>a)      VisionLabs</p>
<p>VisionLabs是俄罗斯的一家专注于人脸识别、物体识别、增强现实和虚拟现实的公司，是全球视觉识别市场的领导者。</p>
<p>VisionLabs处理了俄罗斯和独联体几百万摄像头中的数据流。占据俄罗斯和独联体人脸识别技术引进的80%份额。</p>
<p>美国情报局举办的全球人脸识别挑战赛（IARPA）上，包揽了识别速度和识别准确率两项比赛的冠军。美国情报局承认其人脸识别技术是世界第一。</p>
<p>VisionLabs 与 Facebook 和 Google 是合作伙伴关系，他们共同开发了一个开源计算机视觉平台（Facebook和谷歌为该项目提供了资金支持），这个平台整合了OpenCV和Torch两个最受开发人员欢迎的神经网络和人工智能库。他们与NVidia合作打造了人脸识别汽车钥匙。</p>
<p>【论文】Recognizing Multi-modal Face Spoofing with Face Recognition Networks</p>
<p>【代码】<a href="https://github.com/AlexanderParkin/ChaLearn_liveness_challenge" target="_blank" rel="noopener">https://github.com/AlexanderParkin/ChaLearn_liveness_challenge</a></p>
<p>【模型】模型基于经典的ResNet-34和ResNet-50做backbone，加入了SE模块。</p>
<p>【夺冠技巧】</p>
<p>正如visionlab自己总结的那样，他们的算法之所以solid，是在数据处理，模型架构，参数初始化三个方面的优势累积的结果。</p>
<p>一、是对训练集的巧妙拆分。</p>
<p>为了提高模型的泛化能力和鲁棒性，不仅仅能够识别训练集里面的攻击类型，也能够对测试集里未知的攻击具备识别能力，作者将训练集拆成三份。每一份里面含有两种攻击，然后第三种攻击作为测试。训练的时候，将三个网络看成一个单一模型，对预测结果分数进行平均。</p>
<p>二、MLFA blocks 多层次特征聚合模块。</p>
<p>即Multi-level feature aggregation，使用随机权重初始化MLFA，再用最好的学习策略进行训练，会发现包含MLFA blocks的错误率比不包含的降低了1.5倍。原因是，MLFA blocks可以充分利用来自不同模态粗细层级的特征进行融合。</p>
<p>三、使用多个不同任务的预训练模型fine-tuning。</p>
<p>因为训练数据有限，使用预训练模型进行模型参数初始化时很常见的技巧。visionlabs为了让防欺诈模型具有更广泛的人脸特征学习能力，使用了人脸识别和性别检测的预训练模型作为初始化参数，然后在四个数据集上进行fine-tuning。结果证明，对于目标任务的不同预训练模型进行特征迁移是有作用的，使用多种人脸相关任务的综合结果能够提高系统的稳定性和性能。</p>
<p>一系列技巧，让冠军的方案TPR@FPR=10-4已经无限接近100%；但是，这个模型并不是完美的，因为网络复杂，子模型众多，还有SE模块这种子结构增加了系统复杂性，使得它准确率出色，速度却比较尴尬，不能达到实时。这也是该团队下一步的工作重点。</p>
<p>b)      上海阅面科技有限公司</p>
<p>阅面科技是上海交大AI博士赵京雷的初创公司，成立于2015年的上海。</p>
<p>定位明确，致力于在低功耗AI芯片端进行视觉AI应用的开拓，拥有一系列行业领先的核心技术。</p>
<p>核心研发团队由来自阿里、百度、以及卡内基梅隆大学的顶尖人工智能研发人员组成。</p>
<p>【论文】FaceBagNet: Bag-of-local-features Model for Multi-modal Face Anti-spoofing</p>
<p>【代码】<a href="https://github.com/SeuTao/CVPR19-Face-Anti-spoofing" target="_blank" rel="noopener">https://github.com/SeuTao/CVPR19-Face-Anti-spoofing</a></p>
<p>【模型简评】</p>
<p>他们提出了一个带有模态特征擦除功能（MFE）的多路CNN架构，因为其中借鉴了BagNet的思想，故名为FaceBagNet。从短短5页的论文中，可以看出该团队主要使用了2个方法来提升比赛成绩：</p>
<p>一、patch-based 特征学习</p>
<p>因为欺诈相关的区别性信息遍布于整个脸部区域，所以使用CNN去提取patch级别的图片信息。常见的基于patch的方案，会把整个脸部分割成数个互相不交叠的固定区域，然后每个区域训练一个独立的子网络。</p>
<p>本文的使用方法，对于每一个模态，训练一个单一的CNN随机从脸部获取patch。然后，使用他们自定制的ResNext网络提取特征。网络中包括五组卷积模块，一个GAP，一个softmax层。</p>
<p>结果证明，基于patch的特征对于不同的欺诈攻击具有很高辨别能力。</p>
<p>二、使用MFE模块进行multi-stream融合 RGB，IR，depth三种模态各有一个独立的子网络，三个子网络提取的特征肯定是不同的。在第三个卷积模块后，将特征图进行拼接。这是不同模态结果进行融合的方案。</p>
<p>为什么要使用MFE模块呢？因为这里面有一个问题，直接简单的拼接不同模态的channel，无法充分利用不同模态之间的关联特性。为了防止过拟合和更好的进行特征学习，于是引入了MFE，即Modal Feature Erasing。训练的时候，随机选择一个模态的特征输入进行擦除（其实就是置零）。结果证明，这招有效防止了过拟合。dropout的既视感。</p>
<p>c)      英特尔公司+华科大</p>
<p>英特尔，没什么好说的，老牌美企，半导体行业的常青树，对深度学习领域不断投注资本（并购狂魔）。这次的季军来自位于上海的亚太研发中心，鉴于英特尔长期致力于和国内高校进行合作研究，论文也属名了华科大。</p>
<p>【论文】FeatherNets: Convolutional Neural Networks as Ligh as Feather for Face Anti-spoofing</p>
<p>【代码】<a href="https://github.com/SoftwareGift/FeatherNets_Face-Anti-spoofing-Attack-Detection-Challenge-CVPR2019" target="_blank" rel="noopener">https://github.com/SoftwareGift/FeatherNets_Face-Anti-spoofing-Attack-Detection-Challenge-CVPR2019</a></p>
<p>【模型简评】</p>
<p>模型的名字叫FeatherNet，寓意轻如鸿毛，是轻量级的神经网络模型。主要有两个特色方法：</p>
<p>一、Streaming Model 流模块 主要是替代全局平均池化GAP（Global Average Pooling）。</p>
<p>GAP被众多state of the art 目标检测网络采用，比如ReasNets，DenseNet，MobileNetV2，ShuffleNetV2，非常主流，适合降维和防止过拟合。但是在人脸相关的任务中，GAP对准确性却容易造成负面影响，主要原因在于其中的“equal importance”不适合人脸任务。为什么呢？简而言之，人脸图像不同于一般的目标检测图像，中心区域应该比边缘区域享有更高的权重，GAP是无法做区域权重区分的。能做到这一点的，一个可能选择是全连接层，但是会大量增加模型参数和过拟合的风险，不可取。</p>
<p>作者选用了（DWConv）Depthwise convolution layer来解决这个问题，读者会觉得有点儿眼熟，因为在2018年有一篇论文“Mobilefacenets: Efficient cnns for accurate real-time face verification on mobile devices. ”，里面就论证了Global Depthwise Convolution (GDConv) layer对于人脸任务的有效性。</p>
<p>根据测试结果，Streaming module比GAP精确度更高，又不会像FC层显著增加参数和过拟合风险。</p>
<p>这就是为什么要多读相关领域的论文，因为拿来主义经常很奏效！</p>
<p>二、multi-result fusion 多模态数据的结果最终一定是要融合的，具体到融合的策略就八仙过海各显神通了。FeatherNets选择的是传统的cascade级联的方法，设计了一种新的融合分类器体系结构，将从多模态数据（depth 和 IR 数据）中学习到的多模型进行组合和级联；具体架构如下：1.基于depth images先判断好区分的样本，输出real和fake的结果；2.将上一阶段不好确定的样本再通过IR images再判断一轮，输出最终结果。</p>
<p><strong>五、</strong>   参考资料</p>
<p>\1.       活体检测Face Anti-spoofing综述</p>
<p><a href="https://zhuanlan.zhihu.com/p/43480539" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/43480539</a></p>
<p>\2.       揭开3D结构光的神秘面纱</p>
<p><a href="https://zhuanlan.zhihu.com/p/53801731" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/53801731</a></p>
<p>\3.       人脸识别中的活体检测</p>
<p><a href="https://zhuanlan.zhihu.com/p/25401788" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/25401788</a></p>
<p>\4.       CVPR2019 人脸活体检测专题</p>
<p><a href="https://www.tensorinfinity.com/paper_182.html" target="_blank" rel="noopener">https://www.tensorinfinity.com/paper_182.html</a></p>
<p>\5.       CVPR2019| 人脸防伪检测挑战赛-俄初创公司夺冠,中美企业位列二三(附论文代码及参赛模型解析)</p>
<p><a href="https://zhuanlan.zhihu.com/p/69542283" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/69542283</a></p>
<p>\6.       Model Matters, So Does Data</p>
<p><a href="https://zhuanlan.zhihu.com/p/70606223" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/70606223</a></p>
<p>\7.       一文道尽“人脸数据集”</p>
<p><a href="https://www.infoq.cn/article/l3mwWQF69sc2ea0McV3Q" target="_blank" rel="noopener">https://www.infoq.cn/article/l3mwWQF69sc2ea0McV3Q</a></p>
<p>\8.       活体检测工程化落地</p>
<p><a href="https://zhuanlan.zhihu.com/p/76245997" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/76245997</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>活体检测</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown help</title>
    <url>/2020/02/12/Markdown-help/</url>
    <content><![CDATA[<h1>Markdown 语法说明 (简体中文版)</h1>

<ul>
<li><a href="#overview">概述</a>
<ul>
<li><a href="#philosophy">宗旨</a></li>
<li><a href="#html">兼容 HTML</a></li>
<li><a href="#autoescape">特殊字符自动转换</a></li>
</ul></li>
<li><a href="#block">区块元素</a>
<ul>
<li><a href="#p">段落和换行</a></li>
<li><a href="#header">标题</a></li>
<li><a href="#blockquote">区块引用</a></li>
<li><a href="#list">列表</a></li>
<li><a href="#precode">代码区块</a></li>
<li><a href="#hr">分隔线</a></li>
</ul></li>
<li><a href="#span">区段元素</a>
<ul>
<li><a href="#link">链接</a></li>
<li><a href="#em">强调</a></li>
<li><a href="#code">代码</a></li>
<li><a href="#img">图片</a></li>
</ul></li>
<li><a href="#misc">其它</a>
<ul>
<li><a href="#backslash">反斜杠</a></li>
<li><a href="#autolink">自动链接</a></li>
</ul></li>
<li><a href="#acknowledgement">感谢</a></li>
</ul>

<hr>

<h2 id="overview">概述</h2>

<h3 id="philosophy">宗旨</h3>

<p>Markdown 的目标是实现「易读易写」。</p>

<p>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 <a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="noopener">Setext</a>、<a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="noopener">atx</a>、<a href="http://textism.com/tools/textile/" target="_blank" rel="noopener">Textile</a>、<a href="http://docutils.sourceforge.net/rst.html" target="_blank" rel="noopener">reStructuredText</a>、<a href="http://www.triptico.com/software/grutatxt.html" target="_blank" rel="noopener">Grutatext</a> 和 <a href="http://ettext.taint.org/doc/" target="_blank" rel="noopener">EtText</a>，而最大灵感来源其实是纯文本电子邮件的格式。</p>

<p>总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像*强调*。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p>

<h3 id="html">兼容 HTML</h3>

<p>Markdown 语法的目标是：成为一种适用于网络的<em>书写</em>语言。</p>

<p>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想<em>不是</em>要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种<em>发布</em>的格式，Markdown 是一种<em>书写</em>的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p>

<p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p>

<a id="more"></a>

<p>要制约的只有一些 HTML 区块元素――比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 <code>&lt;p&gt;</code> 标签。</p>

<p>例子如下，在 Markdown 文件里加上一段 HTML 表格：</p>

<pre><code>这是一个普通段落。

&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;Foo&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

这是另一个普通段落。
</code></pre>

<p>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的<code>*强调*</code>会没有效果。</p>

<p>HTML 的区段（行内）标签如 <code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code> 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 <code>&lt;a&gt;</code> 或 <code>&lt;img&gt;</code> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。</p>

<p>和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。</p>

<h3 id="autoescape">特殊字符自动转换</h3>

<p>在 HTML 文件中，有两个字符需要特殊处理： <code>&lt;</code> 和 <code>&amp;</code> 。 <code>&lt;</code> 符号用于起始标签，<code>&amp;</code> 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 <code>&amp;lt;</code> 和 <code>&amp;amp;</code>。</p>

<p><code>&amp;</code> 字符尤其让网络文档编写者受折磨，如果你要打「<code>AT&amp;T</code>」 ，你必须要写成「<code>AT&amp;amp;T</code>」。而网址中的 <code>&amp;</code> 字符也要转换。比如你要链接到：</p>

<pre><code>http://images.google.com/images?num=30&amp;q=larry+bird
</code></pre>

<p>你必须要把网址转换写为：</p>

<pre><code>http://images.google.com/images?num=30&amp;amp;q=larry+bird
</code></pre>

<p>才能放到链接标签的 <code>href</code> 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。</p>

<p>Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 <code>&amp;</code> 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 <code>&amp;amp</code>;。</p>

<p>所以你如果要在文档中插入一个版权符号 <code>©</code>，你可以这样写：</p>

<pre><code>&amp;copy;
</code></pre>

<p>Markdown 会保留它不动。而若你写：</p>

<pre><code>AT&amp;T
</code></pre>

<p>Markdown 就会将它转为：</p>

<pre><code>AT&amp;amp;T
</code></pre>

<p>类似的状况也会发生在 <code>&lt;</code> 符号上，因为 Markdown 允许 <a href="#html">兼容 HTML</a> ，如果你是把 <code>&lt;</code> 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：</p>

<pre><code>4 &lt; 5
</code></pre>

<p>Markdown 将会把它转换为：</p>

<pre><code>4 &amp;lt; 5
</code></pre>

<p>不过需要注意的是，code 范围内，不论是行内还是区块， <code>&lt;</code> 和 <code>&amp;</code> 两个符号都<em>一定</em>会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 <code>&lt;</code> 和 <code>&amp;</code> 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。）</p>

<hr>

<h2 id="block">区块元素</h2>

<h3 id="p">段落和换行</h3>

<p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。</p>

<p>「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 <code>&lt;br /&gt;</code> 标签。</p>

<p>如果你<em>确实</em>想要依赖 Markdown 来插入 <code>&lt;br /&gt;</code> 标签的话，在插入处先按入两个以上的空格然后回车。</p>

<p>的确，需要多费点事（多加空格）来产生 <code>&lt;br /&gt;</code> ，但是简单地「每个换行都转换为 <code>&lt;br /&gt;</code>」的方法在 Markdown 中并不适合， Markdown 中 email 式的 <a href="#blockquote">区块引用</a> 和多段落的 <a href="#list">列表</a> 在使用换行来排版的时候，不但更好用，还更方便阅读。</p>

<h3 id="header">标题</h3>

<p>Markdown 支持两种标题的语法，类 <a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="noopener">Setext</a> 和类 <a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="noopener">atx</a> 形式。</p>

<p>类 Setext 形式是用底线的形式，利用 <code>=</code> （最高阶标题）和 <code>-</code> （第二阶标题），例如：</p>

<pre><code>This is an H1
=============

This is an H2
-------------
</code></pre>

<p>任何数量的 <code>=</code> 和 <code>-</code> 都可以有效果。</p>

<p>类 Atx 形式则是在行首插入 1 到 6 个 <code>#</code> ，对应到标题 1 到 6 阶，例如：</p>

<pre><code># 这是 H1

## 这是 H2

###### 这是 H6
</code></pre>

<p>你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 <code>#</code>，而行尾的 <code>#</code> 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：</p>

<pre><code># 这是 H1 #

## 这是 H2 ##

### 这是 H3 ######
</code></pre>

<h3 id="blockquote">区块引用 Blockquotes</h3>

<p>Markdown 标记区块引用是使用类似 email 中用 <code>&gt;</code> 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 <code>&gt;</code> ：</p>

<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
&gt; 
&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
&gt; id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 <code>&gt;</code> ：</p>

<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.

&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 <code>&gt;</code> ：</p>

<pre><code>&gt; This is the first level of quoting.
&gt;
&gt; &gt; This is nested blockquote.
&gt;
&gt; Back to the first level.
</code></pre>

<p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p>

<pre><code>&gt; ## 这是一个标题。
&gt; 
&gt; 1.   这是第一行列表项。
&gt; 2.   这是第二行列表项。
&gt; 
&gt; 给出一些例子代码：
&gt; 
&gt;     return shell_exec("echo $input | $markdown_script");
</code></pre>

<p>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择<em>增加引用阶层</em>。</p>

<h3 id="list">列表</h3>

<p>Markdown 支持有序列表和无序列表。</p>

<p>无序列表使用星号、加号或是减号作为列表标记：</p>

<pre><code>*   Red
*   Green
*   Blue
</code></pre>

<p>等同于：</p>

<pre><code>+   Red
+   Green
+   Blue
</code></pre>

<p>也等同于：</p>

<pre><code>-   Red
-   Green
-   Blue
</code></pre>

<p>有序列表则使用数字接着一个英文句点：</p>

<pre><code>1.  Bird
2.  McHale
3.  Parish
</code></pre>

<p>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：</p>

<pre><code>&lt;ol&gt;
&lt;li&gt;Bird&lt;/li&gt;
&lt;li&gt;McHale&lt;/li&gt;
&lt;li&gt;Parish&lt;/li&gt;
&lt;/ol&gt;
</code></pre>

<p>如果你的列表标记写成：</p>

<pre><code>1.  Bird
1.  McHale
1.  Parish
</code></pre>

<p>或甚至是：</p>

<pre><code>3. Bird
1. McHale
8. Parish
</code></pre>

<p>你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。</p>

<p>如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。</p>

<p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p>

<p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：</p>

<pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
    viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
    Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>但是如果你懒，那也行：</p>

<pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 <code>&lt;p&gt;</code> 
标签包起来，举例来说：</p>

<pre><code>*   Bird
*   Magic
</code></pre>

<p>会被转换为：</p>

<pre><code>&lt;ul&gt;
&lt;li&gt;Bird&lt;/li&gt;
&lt;li&gt;Magic&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>但是这个：</p>

<pre><code>*   Bird

*   Magic
</code></pre>

<p>会被转换为：</p>

<pre><code>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：</p>

<pre><code>1.  This is a list item with two paragraphs. Lorem ipsum dolor
    sit amet, consectetuer adipiscing elit. Aliquam hendrerit
    mi posuere lectus.

    Vestibulum enim wisi, viverra nec, fringilla in, laoreet
    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum
    sit amet velit.

2.  Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre>

<p>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</p>

<pre><code>*   This is a list item with two paragraphs.

    This is the second paragraph in the list item. You're
only required to indent the first line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.

*   Another item in the same list.
</code></pre>

<p>如果要在列表项目内放进引用，那 <code>&gt;</code> 就需要缩进：</p>

<pre><code>*   A list item with a blockquote:

    &gt; This is a blockquote
    &gt; inside a list item.
</code></pre>

<p>如果要放代码区块的话，该区块就需要缩进<em>两次</em>，也就是 8 个空格或是 2 个制表符：</p>

<pre><code>*   一列表项包含一个列表区块：

        &lt;代码写在这&gt;
</code></pre>

<p>当然，项目列表很可能会不小心产生，像是下面这样的写法：</p>

<pre><code>1986. What a great season.
</code></pre>

<p>换句话说，也就是在行首出现<em>数字-句点-空白</em>，要避免这样的状况，你可以在句点前面加上反斜杠。</p>

<pre><code>1986\. What a great season.
</code></pre>

<h3 id="precode">代码区块</h3>

<p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 标签来把代码区块包起来。</p>

<p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p>

<pre><code>这是一个普通段落：

    这是一个代码区块。
</code></pre>

<p>Markdown 会转换成：</p>

<pre><code>&lt;p&gt;这是一个普通段落：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;这是一个代码区块。
&lt;/code&gt;&lt;/pre&gt;
</code></pre>

<p>这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如：</p>

<pre><code>Here is an example of AppleScript:

    tell application "Foo"
        beep
    end tell
</code></pre>

<p>会被转换为：</p>

<pre><code>&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tell application "Foo"
    beep
end tell
&lt;/code&gt;&lt;/pre&gt;
</code></pre>

<p>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</p>

<p>在代码区块里面， <code>&amp;</code> 、 <code>&lt;</code> 和 <code>&gt;</code> 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：</p>

<pre><code>    &lt;div class="footer"&gt;
        &amp;copy; 2004 Foo Corporation
    &lt;/div&gt;
</code></pre>

<p>会被转换为：</p>

<pre><code>&lt;pre&gt;&lt;code&gt;&amp;lt;div class="footer"&amp;gt;
    &amp;amp;copy; 2004 Foo Corporation
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</code></pre>

<p>代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。</p>

<h3 id="hr">分隔线</h3>

<p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>

<pre><code>* * *

***

*****

- - -

---------------------------------------
</code></pre>

<hr>

<h2 id="span">区段元素</h2>

<h3 id="link">链接</h3>

<p>Markdown 支持两种形式的链接语法： <em>行内式</em>和<em>参考式</em>两种形式。</p>

<p>不管是哪一种，链接文字都是用 [方括号] 来标记。</p>

<p>要建立一个<em>行内式</em>的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p>

<pre><code>This is [an example](http://example.com/ "Title") inline link.

[This link](http://example.net/) has no title attribute.
</code></pre>

<p>会产生：</p>

<pre><code>&lt;p&gt;This is &lt;a href="http://example.com/" title="Title"&gt;
an example&lt;/a&gt; inline link.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://example.net/"&gt;This link&lt;/a&gt; has no
title attribute.&lt;/p&gt;
</code></pre>

<p>如果你是要链接到同样主机的资源，你可以使用相对路径：</p>

<pre><code>See my [About](/about/) page for details.
</code></pre>

<p><em>参考式</em>的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：</p>

<pre><code>This is [an example][id] reference-style link.
</code></pre>

<p>你也可以选择性地在两个方括号中间加上一个空格：</p>

<pre><code>This is [an example] [id] reference-style link.
</code></pre>

<p>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</p>

<pre><code>[id]: http://example.com/  "Optional Title Here"
</code></pre>

<p>链接内容定义的形式为：</p>

<ul>
<li>方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字</li>
<li>接着一个冒号</li>
<li>接着一个以上的空格或制表符</li>
<li>接着链接的网址</li>
<li>选择性地接着 title 内容，可以用单引号、双引号或是括弧包着</li>
</ul>

<p>下面这三种链接的定义都是相同：</p>

<pre><code>[foo]: http://example.com/  "Optional Title Here"
[foo]: http://example.com/  'Optional Title Here'
[foo]: http://example.com/  (Optional Title Here)
</code></pre>

<p><strong>请注意：</strong>有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。</p>

<p>链接网址也可以用方括号包起来：</p>

<pre><code>[id]: &lt;http://example.com/&gt;  "Optional Title Here"
</code></pre>

<p>你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：</p>

<pre><code>[id]: http://example.com/longish/path/to/resource/here
    "Optional Title Here"
</code></pre>

<p>网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。</p>

<p>链接辨别标签可以有字母、数字、空白和标点符号，但是并<em>不</em>区分大小写，因此下面两个链接是一样的：</p>

<pre><code>[link text][a]
[link text][A]
</code></pre>

<p><em>隐式链接标记</em>功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 "Google" 链接到 google.com，你可以简化成：</p>

<pre><code>[Google][]
</code></pre>

<p>然后定义链接内容：</p>

<pre><code>[Google]: http://google.com/
</code></pre>

<p>由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：</p>

<pre><code>Visit [Daring Fireball][] for more information.
</code></pre>

<p>然后接着定义链接：</p>

<pre><code>[Daring Fireball]: http://daringfireball.net/
</code></pre>

<p>链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。</p>

<p>下面是一个参考式链接的范例：</p>

<pre><code>I get 10 times more traffic from [Google] [1] than from
[Yahoo] [2] or [MSN] [3].

  [1]: http://google.com/        "Google"
  [2]: http://search.yahoo.com/  "Yahoo Search"
  [3]: http://search.msn.com/    "MSN Search"
</code></pre>

<p>如果改成用链接名称的方式写：</p>

<pre><code>I get 10 times more traffic from [Google][] than from
[Yahoo][] or [MSN][].

  [google]: http://google.com/        "Google"
  [yahoo]:  http://search.yahoo.com/  "Yahoo Search"
  [msn]:    http://search.msn.com/    "MSN Search"
</code></pre>

<p>上面两种写法都会产生下面的 HTML。</p>

<pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href="http://google.com/"
title="Google"&gt;Google&lt;/a&gt; than from
&lt;a href="http://search.yahoo.com/" title="Yahoo Search"&gt;Yahoo&lt;/a&gt;
or &lt;a href="http://search.msn.com/" title="MSN Search"&gt;MSN&lt;/a&gt;.&lt;/p&gt;
</code></pre>

<p>下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：</p>

<pre><code>I get 10 times more traffic from [Google](http://google.com/ "Google")
than from [Yahoo](http://search.yahoo.com/ "Yahoo Search") or
[MSN](http://search.msn.com/ "MSN Search").
</code></pre>

<p>参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。</p>

<p>使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。</p>

<h3 id="em">强调</h3>

<p>Markdown 使用星号（<code>*</code>）和底线（<code>_</code>）作为标记强调字词的符号，被 <code>*</code> 或 <code>_</code> 包围的字词会被转成用 <code>&lt;em&gt;</code> 标签包围，用两个 <code>*</code> 或 <code>_</code> 包起来的话，则会被转成 <code>&lt;strong&gt;</code>，例如：</p>

<pre><code>*single asterisks*

_single underscores_

**double asterisks**

__double underscores__
</code></pre>

<p>会转成：</p>

<pre><code>&lt;em&gt;single asterisks&lt;/em&gt;

&lt;em&gt;single underscores&lt;/em&gt;

&lt;strong&gt;double asterisks&lt;/strong&gt;

&lt;strong&gt;double underscores&lt;/strong&gt;
</code></pre>

<p>你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。</p>

<p>强调也可以直接插在文字中间：</p>

<pre><code>un*frigging*believable
</code></pre>

<p>但是<strong>如果你的 <code>*</code> 和 <code>_</code> 两边都有空白的话，它们就只会被当成普通的符号</strong>。</p>

<p>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</p>

<pre><code>\*this text is surrounded by literal asterisks\*
</code></pre>

<h3 id="code">代码</h3>

<p>如果要标记一小段行内代码，你可以用反引号把它包起来（<code>`</code>），例如：</p>

<pre><code>Use the `printf()` function.
</code></pre>

<p>会产生：</p>

<pre><code>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;
</code></pre>

<p>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：</p>

<pre><code>``There is a literal backtick (`) here.``
</code></pre>

<p>这段语法会产生：</p>

<pre><code>&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;
</code></pre>

<p>代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：</p>

<pre><code>A single backtick in a code span: `` ` ``

A backtick-delimited string in a code span: `` `foo` ``
</code></pre>

<p>会产生：</p>

<pre><code>&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;
</code></pre>

<p>在代码区段内，<code>&amp;</code> 和方括号<strong>都</strong>会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：</p>

<pre><code>Please don't use any `&lt;blink&gt;` tags.
</code></pre>

<p>转为：</p>

<pre><code>&lt;p&gt;Please don't use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;
</code></pre>

<p>你也可以这样写：</p>

<pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.
</code></pre>

<p>以产生：</p>

<pre><code>&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded
equivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;
</code></pre>

<h3 id="img">图片</h3>

<p>很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。</p>

<p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： <em>行内式</em>和<em>参考式</em>。</p>

<p>行内式的图片语法看起来像是：</p>

<pre><code>![Alt text](/path/to/img.jpg)

![Alt text](/path/to/img.jpg "Optional title")
</code></pre>

<p>详细叙述如下：</p>

<ul>
<li>一个惊叹号 <code>!</code></li>
<li>接着一个方括号，里面放上图片的替代文字</li>
<li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上
选择性的 'title' 文字。</li>
</ul>

<p>参考式的图片语法则长得像这样：</p>

<pre><code>![Alt text][id]
</code></pre>

<p>「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：</p>

<pre><code>[id]: url/to/image  "Optional title attribute"
</code></pre>

<p>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p>

<hr>

<h2 id="misc">其它</h2>

<h3 id="autolink">自动链接</h3>

<p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p>

<pre><code>&lt;http://example.com/&gt;
</code></pre>

<p>Markdown 会转为：</p>

<pre><code>&lt;a href="http://example.com/"&gt;http://example.com/&lt;/a&gt;
</code></pre>

<p>邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：</p>

<pre><code>&lt;<a href="https://www.appinn.com/cdn-cgi/l/email-protection" target="_blank" rel="noopener" class="__cf_email__" data-cfemail="cfaeababbdaabcbc8faab7aea2bfa3aae1aca0a2">[email&nbsp;protected]</a>&gt;
</code></pre>

<p>Markdown 会转成：</p>

<pre><code>&lt;a href="&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;
&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;
&amp;#109;"&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;
&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;
</code></pre>

<p>在浏览器里面，这段字串（其实是 <code>&lt;a href="mailto:<a href="https://www.appinn.com/cdn-cgi/l/email-protection" target="_blank" rel="noopener" class="__cf_email__" data-cfemail="caabaeaeb8afb9b98aafb2aba7baa6afe4a9a5a7">[email&nbsp;protected]</a>"&gt;<a href="https://www.appinn.com/cdn-cgi/l/email-protection" target="_blank" rel="noopener" class="__cf_email__" data-cfemail="543530302631272714312c35392438317a373b39">[email&nbsp;protected]</a>&lt;/a&gt;</code>）会变成一个可以点击的「<a href="https://www.appinn.com/cdn-cgi/l/email-protection" target="_blank" rel="noopener" class="__cf_email__" data-cfemail="e786838395829494a7829f868a978b82c984888a">[email&nbsp;protected]</a>」链接。</p>

<p>（这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）</p>

<h3 id="backslash">反斜杠</h3>

<p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 <code>&lt;em&gt;</code> 标签），你可以在星号的前面加上反斜杠：</p>

<pre><code>\*literal asterisks\*
</code></pre>

<p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>

<pre><code>\   反斜线
`   反引号
*   星号
_   底线
{}  花括号
[]  方括号
()  括弧
#   井字号
+   加号
-   减号
.   英文句点
!   惊叹号
</code></pre>

<h2 id="acknowledgement">感谢</h2>

<p>文章转载自 <a href="https://www.appinn.com/markdown/" target="_blank" rel="noopener">https://www.appinn.com/markdown/</a>

<p>感谢 <a href="https://twitter.com/#!/leafy7382" target="_blank" rel="noopener">leafy7382</a> 协助翻译，<a href="http://iamhlb.com/" target="_blank" rel="noopener">hlb</a>、<a href="https://twitter.com/randylien" target="_blank" rel="noopener">Randylien</a> 帮忙润稿，<a href="https://twitter.com/#!/ethantw" target="_blank" rel="noopener">ethantw</a> 的<a href="http://ethantw.net/projects/han/" target="_blank" rel="noopener">汉字标准格式・CSS Reset</a>， <a href="http://kidwm.net/" target="_blank" rel="noopener">WM</a> 回报文字错误。</p>

<p>感谢 <a href="https://github.com/fenprace" target="_blank" rel="noopener">fenprace</a>，<a href="https://github.com/addv" target="_blank" rel="noopener">addv</a>。</p>

]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
